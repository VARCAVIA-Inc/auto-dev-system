// /schemas/v1/state_aggregator.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/state_aggregator.proto

// Il package definisce un namespace per evitare collisioni e organizza gli schemi.

package state_aggregator_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StateAggregatorService_SetTaskState_FullMethodName = "/varcavia.state_aggregator.v1.StateAggregatorService/SetTaskState"
	StateAggregatorService_GetTaskState_FullMethodName = "/varcavia.state_aggregator.v1.StateAggregatorService/GetTaskState"
)

// StateAggregatorServiceClient is the client API for StateAggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definisce il servizio gRPC StateAggregator e i suoi metodi (RPCs).
type StateAggregatorServiceClient interface {
	// Imposta (crea o aggiorna) lo stato di un task.
	SetTaskState(ctx context.Context, in *SetTaskStateRequest, opts ...grpc.CallOption) (*SetTaskStateResponse, error)
	// Recupera lo stato corrente di un task.
	GetTaskState(ctx context.Context, in *GetTaskStateRequest, opts ...grpc.CallOption) (*GetTaskStateResponse, error)
}

type stateAggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateAggregatorServiceClient(cc grpc.ClientConnInterface) StateAggregatorServiceClient {
	return &stateAggregatorServiceClient{cc}
}

func (c *stateAggregatorServiceClient) SetTaskState(ctx context.Context, in *SetTaskStateRequest, opts ...grpc.CallOption) (*SetTaskStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskStateResponse)
	err := c.cc.Invoke(ctx, StateAggregatorService_SetTaskState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateAggregatorServiceClient) GetTaskState(ctx context.Context, in *GetTaskStateRequest, opts ...grpc.CallOption) (*GetTaskStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStateResponse)
	err := c.cc.Invoke(ctx, StateAggregatorService_GetTaskState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateAggregatorServiceServer is the server API for StateAggregatorService service.
// All implementations must embed UnimplementedStateAggregatorServiceServer
// for forward compatibility
//
// Definisce il servizio gRPC StateAggregator e i suoi metodi (RPCs).
type StateAggregatorServiceServer interface {
	// Imposta (crea o aggiorna) lo stato di un task.
	SetTaskState(context.Context, *SetTaskStateRequest) (*SetTaskStateResponse, error)
	// Recupera lo stato corrente di un task.
	GetTaskState(context.Context, *GetTaskStateRequest) (*GetTaskStateResponse, error)
	mustEmbedUnimplementedStateAggregatorServiceServer()
}

// UnimplementedStateAggregatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateAggregatorServiceServer struct {
}

func (UnimplementedStateAggregatorServiceServer) SetTaskState(context.Context, *SetTaskStateRequest) (*SetTaskStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskState not implemented")
}
func (UnimplementedStateAggregatorServiceServer) GetTaskState(context.Context, *GetTaskStateRequest) (*GetTaskStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskState not implemented")
}
func (UnimplementedStateAggregatorServiceServer) mustEmbedUnimplementedStateAggregatorServiceServer() {
}

// UnsafeStateAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateAggregatorServiceServer will
// result in compilation errors.
type UnsafeStateAggregatorServiceServer interface {
	mustEmbedUnimplementedStateAggregatorServiceServer()
}

func RegisterStateAggregatorServiceServer(s grpc.ServiceRegistrar, srv StateAggregatorServiceServer) {
	s.RegisterService(&StateAggregatorService_ServiceDesc, srv)
}

func _StateAggregatorService_SetTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateAggregatorServiceServer).SetTaskState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateAggregatorService_SetTaskState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateAggregatorServiceServer).SetTaskState(ctx, req.(*SetTaskStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateAggregatorService_GetTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateAggregatorServiceServer).GetTaskState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateAggregatorService_GetTaskState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateAggregatorServiceServer).GetTaskState(ctx, req.(*GetTaskStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateAggregatorService_ServiceDesc is the grpc.ServiceDesc for StateAggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateAggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "varcavia.state_aggregator.v1.StateAggregatorService",
	HandlerType: (*StateAggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTaskState",
			Handler:    _StateAggregatorService_SetTaskState_Handler,
		},
		{
			MethodName: "GetTaskState",
			Handler:    _StateAggregatorService_GetTaskState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/state_aggregator.proto",
}
