project_name: VARCAVIA Office - Full Cycle System Check
description: "Missione di validazione totale per testare ManagerBot, OperatorBot, AuditBot, Pull Request Validation e aggiornamento stato, con casi positivi e negativi."

phases:
  - name: "Fase 1: Task semplice funzionante"
    tasks:
      - description: "Crea il modulo `src/utils/hello.py` con una funzione `say_hello(name)` che restituisce 'Hello, {name}'. Scrivi il relativo test in `tests/utils/test_hello.py`."
        agent: ManagerBot
        status: pending

  - name: "Fase 2: Task che genera errore per test fallito"
    tasks:
      - description: "Crea `src/utils/faulty.py` con una funzione `divide(a, b)` che divide due numeri. Ma nel test `tests/utils/test_faulty.py`, verifica che `divide(4, 0)` restituisca 0 invece di generare errore (deve fallire)."
        agent: ManagerBot
        status: pending

  - name: "Fase 3: Task con test corretto ma sintassi sbagliata (testa linter)"
    tasks:
      - description: "Crea `src/utils/broken.py` con funzione `broken_func()` che ritorna una stringa, ma dimentica i due punti nella definizione (`def broken_func()`), e crea `tests/utils/test_broken.py` con un test che verifichi il ritorno di 'Broken'."
        agent: ManagerBot
        status: pending

  - name: "Fase 4: Task superato con etichetta finale"
    tasks:
      - description: "Crea `src/utils/complete.py` con funzione `is_even(n)` che ritorna True se n Ã¨ pari. Scrivi `tests/utils/test_complete.py` per verificarlo con assert su 2, 3 e 4."
        agent: ManagerBot
        status: pending

  - name: "Fase 5: Task che richiede aggiornamento a mano"
    tasks:
      - description: "Crea `src/utils/manual.py` con `def needs_manual_work()`, ma lascia il file vuoto per ora. Il test `tests/utils/test_manual.py` deve fallire. Poi aggiorna manualmente il file per farlo passare, e verifica che il ManagerBot riconosca il successo dopo il push."
        agent: ManagerBot
        status: pending

  - name: "Fase 6: Simula errore temporaneo per AuditBot"
    tasks:
      - description: "Crea `src/utils/temp_fail.py` con `def maybe_fail(x)`, che al primo push genera un errore nel test (es. `assert maybe_fail(3) == 999`), ma al secondo push viene corretto a `assert maybe_fail(3) == 3`. Serve per testare se l'AuditBot segnala i task che restano in `FAILED` per troppo tempo."
        agent: ManagerBot
        status: pending
