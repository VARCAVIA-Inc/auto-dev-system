# .github/workflows/main.yml
name: Manager Bot Orchestration

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'development_plan.md'
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  run_manager_bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write 
      id-token: write
    outputs:
      summary: ${{ steps.summary.outputs.summary_text }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
      
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/776257662402/locations/global/workloadIdentityPools/varcavia-office-pool-v2/providers/github-provider'
          service_account: 'varcavia-office-agent@gemini-api-key-466122.iam.gserviceaccount.com'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # MODIFICA: Caching avanzato per l'intero virtual environment
      - name: Restore or create venv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies (only if cache missed)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Run Manager Bot
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          GITHUB_USER: "VARCAVIA-Git"
          GITHUB_REPOSITORY: ${{ github.repository }}
          PYTHONPATH: ${{ github.workspace }}
          # MODIFICA: Forziamo la libreria a rispettare i timeout
          GOOGLE_API_USE_CLIENT_TIMEOUT: "1"
        run: |
          # Attiviamo il venv dalla cache prima di eseguire lo script
          source .venv/bin/activate
          python src/manager_bot.py

      - name: Set run summary output
        id: summary
        if: always()
        run: |
          if [[ -f run_summary.txt ]]; then
            echo "summary_text=$(cat run_summary.txt)" >> $GITHUB_OUTPUT
          else
            echo "summary_text=Nessuna azione specifica eseguita." >> $GITHUB_OUTPUT
          fi
          
  send_status_notification:
    # ... (La logica di notifica non necessita di modifiche sostanziali, ma per completezza ecco il file intero)
    runs-on: ubuntu-latest
    if: always()
    needs: [run_manager_bot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install email dependencies
        run: pip install secure-smtplib
      - name: Send workflow status email
        env:
          JOB_STATUS: ${{ needs.run_manager_bot.result }}
          RUN_SUMMARY: ${{ needs.run_manager_bot.outputs.summary }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          PYTHONPATH: ${{ github.workspace }}
        run: python src/utils/report_generator.py